Мотивация
В систему необходимо добавить мониторинг, чтобы:
    1. Отслеживать работоспособность системы
    2. Выявлять аномальное поведение системы (повышение ошибок, снижение скорости обработки и тд.)
    3. Оптимизировать производительность
    4. Отслеживать подозрительную активность в системе на неестественные действия в системе (безопасность)
    5. Прогнозировать развитие мощностей системы на будущее
    6. Улучшать пользовательский опыт
Все указанные пункты выше помогут компании снизить расходы на ресурсы необходимые для системы при снижении активности пользователей, быстрее решать проблемы, чтобы пользователи не ощущали их на себе, заблаговременной увеличивать количество ресурсов в связи с естественным ростом количества пользователей. Увеличит безопасность системы и уменьшит вероятность негативных эффектов при вмешательствах из вне. Позволит лучше понимать действия пользователя и на основании этого реализовать более удобный функционал.Все это принесет:
    1. Увеличение прибыли
    2. Уменьшение затрат путем более быстрого реагирования на ситуации
    3. Конкурентные предложения для клиентов и лучшее позиционирование продукта на рынке
    4. Высокую безопасность и соответственно доверие пользователей

Выбор подхода к мониторингу:
    1. Для сервисов API, который взаимодействуют с клиентом, можно использовать подход RED
    2. Для back сервисов можно использовать подход USE
    3. Для начала взяли бы к отслеживанию все 200 и 500 ошибки для shop API,  CRM API и MES API для отслеживания процентного соотношения ошибок, чтобы при переходе установленной границы поднимать "тревогу" и восстанавливать систему до необходимого уровня оказания услуги
    4. Отслеживал количество подключений к БД MES и shop и CRM для понимания нагрузки на БД и при необходимости проверять поведение системы, если произойдет резкое повышение или понижение количества подключений
    5. Использование памяти для всех сервисов, чтобы понимать их общее состояние и не допускать перегрузки или простивание большого количества памяти
    6. Отслеживал бы CPU для всех сервисов так же как и для пункта 3
    7. Ввести отслеживание RPS для MES API как со стороны внутренней системы (интернет магазин) так и для внешних пользователей (открытое API), для понимания количества запросов и оказываемой нагрузки на каждом из каналов
    8. Соотношение неотправленных сообщений к отправленным в MQ, для понимания качества асинхронного взаимодействия

План действий:
    1. Поднять сервер Prometheus
    2. Реализовать агенты экспортеры в каждом сервисе для сбора метрик
    3. Реализовать подключение к Grafana для визуализации метрик
    4. Реализация сервисов аллертинга для оповещения при превышении пороговых значений

Показатели насыщенности
    1.MES API :
        1.1 Latency > 500ms: Создать тикет для разработчиков.
        1.2 PS > 100: Добавить дополнительные инстансы.
    2. CRM API :
        2.1 Errors > 5%: Отправить уведомление в support.
        2.2 Saturation > 80%: Перезапустить сервис.